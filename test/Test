
TestsRun=0
TestsPassed=0
TestsFailed=0
ExitOnFail=0
KeepTest=0

while [ $# -gt 0 ] ; do
    case $1 in
      -help)
cat 1>&2 << EOF
	-c	cleanup
	-k	keep temps
	-e	exit on failure
	-x	shell debug
EOF
	exit	;;
      -c)   # Clean Up
	    #
	    rm -f *.tmp
	    exit 0
	    ;;
      -k)   KeepTest=1	;;
      -e)   ExitOnFail=1	;;
      -x)	SetMinusX=1	;;
      *)    Select=$1;;
    esac
    shift 
done


printf -- "Number	%-52s	Result	   Time\n" Test
printf -- "------	%-52s	------	 ------\n" ----


Test() {
    Expect=Pass
    if [ x"$1" = "x!" ] ; then Expect=Fail;  shift
    fi

    Title=$*
    TestsRun=`expr $TestsRun + 1`

    printf "%6d	%-52s" 	$TestsRun "$Title" 1>&2

    #exec 1>&8
    #exec > TestOutput.$TestsRun
    Start=`clock`
    if [ "$SetMinusX" = 1 ] ; then
        set -x
    fi
}

Clock() {
    Start=`clock`
}

TestCleanUp() {
    Now=`clock`; Elapse=`calc $Now - $Start`

    if [ $1 = $Expect ] ; then Result=Pass ; TestsPassed=`expr $TestsPassed + 1`
    else                       Result=Fail ; TestsFailed=`expr $TestsFailed + 1`
    fi
    printf "	$Result	%7.3f\n" $Elapse 1>&2

    if [ $Result = Fail ] ; then
	if [ "$xy" = 1 ] ; then
	    echo "	:$x:"
	    echo "	:$y:"
	    echo
	fi

	if [ $ExitOnFail = 1 ] ; then
	    exit 1
	fi
    fi
}

Fail() {  TestCleanUp Fail; }
Pass() {  TestCleanUp Pass; }

CompareArgs() {
    xy=1
    while [ $# -ge 2 ] ; do
	x=$1
	y=$2
	shift; shift

	if [ "$x" != "$y" ] ; then
	    Fail; return 1
	fi
    done

    Pass; return 0
}

CompareEval() {
    xy=1
    while [ $# -ge 2 ] ; do
	x=`$1`
	y=$2
	shift; shift

	if [ "$x" != "$y" ] ; then
	    Fail; return 1
	fi
    done

    Pass; return 0
}

CompareFiles() {
    xy=0
    if cmp "$1" "$2" ; then 	Pass; return 0
    else 		    	Fail; return 1
    fi
}

DiffFiles() {
  xy=0
  while [ $# != 0 ] ; do
    if diff "$1" "$2" ; then 	Pass; return 0
    else 			Fail; return 1
    fi
    shift
    shift
  done
}

TestDone() {
    if [ $KeepTest = 0 ] ; then rm -f *.tmp *.tmp.* TestOutput.*
    fi

    echo
    echo "Failed $TestsFailed"
    echo "Passed $TestsPassed of $TestsRun tests run."
    exit 0
}
